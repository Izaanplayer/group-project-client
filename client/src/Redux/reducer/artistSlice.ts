import { createSlice, PayloadAction } from '@reduxjs/toolkit';
//import { RootState } from '../store/store';
import { isSomeAsyncActionsFulfilled, isSomeAsyncActionsPending, isSomeAsyncActionsRejected } from '../helpers';
import { RootState } from '../store/store';
//import { incrementAsync, otherIncrementAsync } from '../thunks/counter';

//Acá se ingresan los parámetros qué se recibirán desde el backend
export type ArtistArgs = {
    id: number;
    email: string;
    nickName: string;
    name: string;
    lastName: string;
    city: string;
    country: string;
    eventName: string;
    description: string;
    imagesEvent: string[],
    duration: number;
    isActive: boolean;
    priceTime: number;
    priceDay: number;
}

export type validateRol =   {
    isAdmin : boolean
}

export interface ArtistState {
    data: ArtistArgs[],
    detail: ArtistArgs[],
    isAdmin: boolean
    
}

const initialState: ArtistState = {
    data: [],
    detail: [], //{}
    isAdmin: false
};

/* LAS ASYNC ACTIONS ESTÁN EN LA CARPETA DE THUNKS */
const isActionsPending = isSomeAsyncActionsPending([

]);

const isActionsFulfilled = isSomeAsyncActionsFulfilled([

]);

const isActionsRejected = isSomeAsyncActionsRejected([

]);

export const artistSlice = createSlice({
    name: 'artists',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        getAll: (state, action: PayloadAction<ArtistArgs[]>) => {
            state.data = action.payload;
        },
        getDetail: (state, action: PayloadAction<ArtistArgs[]>) => {
            state.detail = action.payload;
        },
        IsAdmin: (state, action)  => {
            state.isAdmin = action.payload
        }
        /* decrement: (state) => {
            state.value -= 1;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action: PayloadAction<number>) => {
            state.value += action.payload;
        }, */
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        /* builder
            .addMatcher(isActionsPending, (state) => {
                state.status = 'loading';
            })
            .addMatcher(isActionsFulfilled, (state, action) => {
                state.status = 'success';
                state.value += action.payload;
            })
            .addMatcher(isActionsRejected, (state, action) => {
                state.status = 'failed';
            }) */
    },
});

export const { getAll, getDetail, IsAdmin } = artistSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectArtist = (state: RootState) => state.artists;

export default artistSlice.reducer;
